-- MySQL Script generated by MySQL Workbench
-- Thu 27 May 2021 06:18:10 PM PDT
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema programData
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema programData
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `programData` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
-- -----------------------------------------------------
-- Schema userData
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema userData
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `userData` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `programData` ;

-- -----------------------------------------------------
-- Table `programData`.`clubSubject`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `programData`.`clubSubject` (
  `idclubSubject` INT NOT NULL AUTO_INCREMENT,
  `clubSubject` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idclubSubject`))
ENGINE = InnoDB
AUTO_INCREMENT = 10
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `programData`.`clubs`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `programData`.`clubs` (
  `clubID` INT NOT NULL AUTO_INCREMENT,
  `clubName` VARCHAR(45) NOT NULL,
  `fk_clubSubject` INT NOT NULL,
  `clubDescription` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`clubID`),
  INDEX `fk_clubs_clubSubject_idx` (`fk_clubSubject` ASC) VISIBLE,
  CONSTRAINT `fk_clubs_clubSubject`
    FOREIGN KEY (`fk_clubSubject`)
    REFERENCES `programData`.`clubSubject` (`idclubSubject`))
ENGINE = InnoDB
AUTO_INCREMENT = 11
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `programData`.`students`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `programData`.`students` (
  `studentID` INT NOT NULL AUTO_INCREMENT,
  `studentFirstName` VARCHAR(45) NOT NULL,
  `studentLastName` VARCHAR(45) NOT NULL,
  `studentBirthdate` DATE NOT NULL,
  PRIMARY KEY (`studentID`))
ENGINE = InnoDB
AUTO_INCREMENT = 7
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `programData`.`studentsInClubs`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `programData`.`studentsInClubs` (
  `idstudentsInClubs` INT NOT NULL AUTO_INCREMENT,
  `fk_student` INT NOT NULL,
  `fk_club` INT NOT NULL,
  PRIMARY KEY (`idstudentsInClubs`),
  INDEX `fk_studentsInClubs_students_idx` (`fk_student` ASC) VISIBLE,
  INDEX `fk_studentsInClubs_clubs_idx` (`fk_club` ASC) VISIBLE,
  CONSTRAINT `fk_studentsInClubs_clubs`
    FOREIGN KEY (`fk_club`)
    REFERENCES `programData`.`clubs` (`clubID`),
  CONSTRAINT `fk_studentsInClubs_students`
    FOREIGN KEY (`fk_student`)
    REFERENCES `programData`.`students` (`studentID`))
ENGINE = InnoDB
AUTO_INCREMENT = 15
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

USE `userData` ;

-- -----------------------------------------------------
-- Table `userData`.`userRoles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `userData`.`userRoles` (
  `iduserRoles` INT NOT NULL AUTO_INCREMENT,
  `userRoleName` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`iduserRoles`))
ENGINE = InnoDB
AUTO_INCREMENT = 2
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `userData`.`userTable`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `userData`.`userTable` (
  `userID` VARCHAR(4) NOT NULL,
  `username` VARCHAR(45) NOT NULL,
  `fullName` VARCHAR(45) NOT NULL,
  `userPassword` VARCHAR(45) NOT NULL,
  `fk_userRole` INT NULL DEFAULT NULL,
  `createdBy` VARCHAR(45) NOT NULL,
  `updatedBy` VARCHAR(45) NOT NULL,
  `loggedIn` TINYINT NOT NULL,
  PRIMARY KEY (`userID`),
  UNIQUE INDEX `username_UNIQUE` (`username` ASC) VISIBLE,
  INDEX `fk_userRole_idx` (`fk_userRole` ASC) VISIBLE,
  CONSTRAINT `fk_userRole`
    FOREIGN KEY (`fk_userRole`)
    REFERENCES `userData`.`userRoles` (`iduserRoles`)
    ON DELETE SET NULL
    ON UPDATE RESTRICT)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `userData`.`accountCreation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `userData`.`accountCreation` (
  `idaccountCreation` INT NOT NULL AUTO_INCREMENT,
  `creationDateTime` DATETIME NOT NULL,
  `fk_user` VARCHAR(4) NOT NULL,
  `userCreatedBy` VARCHAR(45) NOT NULL,
  `fk_userRole` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idaccountCreation`),
  INDEX `fk_userCreated_idx` (`fk_user` ASC) VISIBLE,
  CONSTRAINT `fk_userCreated`
    FOREIGN KEY (`fk_user`)
    REFERENCES `userData`.`userTable` (`userID`)
    ON DELETE CASCADE
    ON UPDATE RESTRICT)
ENGINE = InnoDB
AUTO_INCREMENT = 2
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `userData`.`accountDeleted`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `userData`.`accountDeleted` (
  `idaccountDeleted` INT NOT NULL AUTO_INCREMENT,
  `userID` VARCHAR(4) NOT NULL,
  `username` VARCHAR(45) NOT NULL,
  `userDeletedBy` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idaccountDeleted`))
ENGINE = InnoDB
AUTO_INCREMENT = 2
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `userData`.`logins`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `userData`.`logins` (
  `idlogins` INT NOT NULL AUTO_INCREMENT,
  `fk_userID` VARCHAR(4) NOT NULL,
  `loginDateTime` DATETIME NOT NULL,
  `loginFrom` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idlogins`),
  INDEX `fk_userLogin_idx` (`fk_userID` ASC) VISIBLE,
  CONSTRAINT `fk_userLogin`
    FOREIGN KEY (`fk_userID`)
    REFERENCES `userData`.`userTable` (`userID`)
    ON DELETE CASCADE
    ON UPDATE RESTRICT)
ENGINE = InnoDB
AUTO_INCREMENT = 3
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `userData`.`passwordChange`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `userData`.`passwordChange` (
  `idpasswordChange` INT NOT NULL AUTO_INCREMENT,
  `fk_userPWChanged` VARCHAR(4) NOT NULL,
  `oldPassword` VARCHAR(45) NOT NULL,
  `changeDate` DATETIME NOT NULL,
  `pwChangedBy` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idpasswordChange`),
  INDEX `fk_pwuser_idx` (`fk_userPWChanged` ASC) VISIBLE,
  CONSTRAINT `fk_pwuser`
    FOREIGN KEY (`fk_userPWChanged`)
    REFERENCES `userData`.`userTable` (`userID`)
    ON DELETE CASCADE
    ON UPDATE RESTRICT)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `userData`.`roleUpdates`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `userData`.`roleUpdates` (
  `idroleUpdates` INT NOT NULL AUTO_INCREMENT,
  `fk_userID` VARCHAR(4) NOT NULL,
  `fk_previousRole` INT NOT NULL,
  `fk_newRole` INT NOT NULL,
  `roleChangeDate` DATETIME NOT NULL,
  PRIMARY KEY (`idroleUpdates`),
  INDEX `fk_oldRole_idx` (`fk_previousRole` ASC) VISIBLE,
  INDEX `fk_newRole_idx` (`fk_newRole` ASC) VISIBLE,
  INDEX `fk_userID_idx` (`fk_userID` ASC) VISIBLE,
  CONSTRAINT `fk_newRole`
    FOREIGN KEY (`fk_newRole`)
    REFERENCES `userData`.`userRoles` (`iduserRoles`)
    ON DELETE CASCADE
    ON UPDATE RESTRICT,
  CONSTRAINT `fk_oldRole`
    FOREIGN KEY (`fk_previousRole`)
    REFERENCES `userData`.`userRoles` (`iduserRoles`),
  CONSTRAINT `fk_userID`
    FOREIGN KEY (`fk_userID`)
    REFERENCES `userData`.`userTable` (`userID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `userData`.`usernameChange`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `userData`.`usernameChange` (
  `idusernameChange` INT NOT NULL AUTO_INCREMENT,
  `fk_usernameChanged` VARCHAR(4) NOT NULL,
  `oldUsername` VARCHAR(45) NOT NULL,
  `dateTimeChanged` DATETIME NOT NULL,
  `usernameChangedBy` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idusernameChange`),
  INDEX `fk_usernameChange_idx` (`fk_usernameChanged` ASC) VISIBLE,
  CONSTRAINT `fk_usernameChange`
    FOREIGN KEY (`fk_usernameChanged`)
    REFERENCES `userData`.`userTable` (`userID`)
    ON DELETE CASCADE
    ON UPDATE RESTRICT)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

USE `programData` ;

-- -----------------------------------------------------
-- procedure addNewClub
-- -----------------------------------------------------

DELIMITER $$
USE `programData`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `addNewClub`(
IN clubname varchar(45),
IN clubdesc varchar(100),
IN clubsubject varchar(45)
)
BEGIN
insert into clubs(clubName, fk_clubSubject, clubDescription) values(clubname, (select idclubSubject from clubSubject where clubsubject = clubSubject.clubSubject), clubdesc);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure addNewClubSubject
-- -----------------------------------------------------

DELIMITER $$
USE `programData`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `addNewClubSubject`(
IN clubsubject varchar(45)
)
BEGIN
insert into clubSubject(clubSubject) values(clubsubject);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure addNewStudent
-- -----------------------------------------------------

DELIMITER $$
USE `programData`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `addNewStudent`(
IN studentFirstName varchar(45),
IN studentLastName varchar(45),
IN studentBirthdate date
)
BEGIN
insert into students(studentFirstName, studentLastName, studentBirthdate) values(studentFirstName, studentLastName, studentBirthdate);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure addStudentToClub
-- -----------------------------------------------------

DELIMITER $$
USE `programData`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `addStudentToClub`(
IN studentFN varchar(45),
IN studentLN varchar(45),
IN club varchar(45)
)
BEGIN
insert into studentsInClubs(fk_student, fk_club) values ((select studentID from students where students.studentFirstName = studentFN and students.studentLastName = studentLN),
(select clubID from clubs where clubs.clubName = club));
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure whichClubsIsAStudentIn
-- -----------------------------------------------------

DELIMITER $$
USE `programData`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `whichClubsIsAStudentIn`(
IN firstname varchar(45),
IN lastname varchar(45)
)
BEGIN
select students.studentFirstName, students.studentLastName, b.clubName, b.clubDescription, b.clubSubject
 from students inner join (select a.clubName, a.clubDescription, a.clubSubject, studentsInClubs.fk_student from studentsInClubs inner join 
 (select clubs.clubID, clubs.clubName, clubs.clubDescription, clubSubject.clubSubject
 from clubs inner join clubSubject where clubs.fk_clubSubject = clubSubject.idclubSubject) a where a.clubID = studentsInClubs.fk_club) b
where b.fk_student = students.studentID and students.studentFirstName = firstname and students.studentLastName = lastname order by students.studentLastName;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure whichStudentsAreInAClub
-- -----------------------------------------------------

DELIMITER $$
USE `programData`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `whichStudentsAreInAClub`(
IN clubName varchar(45)
)
BEGIN
select s.studentFirstName, s.studentLastName from clubs c inner join 
(select sic.fk_club, s.studentFirstName, s.studentLastName from studentsInClubs sic inner join students s where s.studentID = sic.fk_student) s
where c.clubID = s.fk_club and c.clubName = clubName;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure whoWhichClubs
-- -----------------------------------------------------

DELIMITER $$
USE `programData`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `whoWhichClubs`(
IN firstname varchar(45),
IN lastname varchar(45)
)
BEGIN
select students.studentFirstName, students.studentLastName, b.clubName, b.clubDescription, b.clubSubject
 from students inner join (select a.clubName, a.clubDescription, a.clubSubject, studentsInClubs.fk_student from studentsInClubs inner join (select clubs.clubID, clubs.clubName, clubs.clubDescription, clubSubject.clubSubject
 from clubs inner join clubSubject where clubs.fk_clubSubject = clubSubject.idclubSubject) a where a.clubID = studentsInClubs.fk_club) b
where b.fk_student = students.studentID and students.studentFirstName = firstname and students.studentLastName = lastname order by students.studentLastName;
END$$

DELIMITER ;
USE `userData`;

DELIMITER $$
USE `userData`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `userData`.`userTable_AFTER_DELETE`
AFTER DELETE ON `userData`.`userTable`
FOR EACH ROW
BEGIN
	INSERT INTO accountDeleted(userID, username, userDeletedBy) values(OLD.userID, OLD.username, 'app2');
END$$

USE `userData`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `userData`.`userTable_AFTER_INSERT`
AFTER INSERT ON `userData`.`userTable`
FOR EACH ROW
BEGIN
insert into accountCreation(creationDateTime, fk_user, userCreatedBy, fk_userRole) values(now(), NEW.userID, NEW.createdBy, NEW.fk_userRole);
END$$

USE `userData`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `userData`.`userTable_AFTER_UPDATE`
AFTER UPDATE ON `userData`.`userTable`
FOR EACH ROW
BEGIN
IF OLD.loggedIn != NEW.loggedIn THEN
	INSERT INTO logins(fk_userID, loginDateTime, loginFrom) values(OLD.userID, now(), 'app1');
END IF;
IF OLD.userPassword != NEW.userPassword THEN
	INSERT INTO passwordChange(fk_userPWChanged, oldPassword, changeDate, pwChangedBy) values (OLD.userID, OLD.userPassword, now(), OLD.userID);
END IF;
IF OLD.username != NEW.username THEN
	INSERT INTO usernameChange(fk_usernameChanged, oldUsername, dateTimeChanged, usernameChangedBy) values(OLD.userID, OLD.username, now(), OLD.userID);
END IF;
IF OLD.fk_userRole != NEW.fk_userRole THEN
	INSERT INTO roleUpdates(fk_userID, fk_previousRole, fk_newRole, roleChangeDate) values(OLD.userID, OLD.fk_userRole, NEW.fk_userRole, now());
END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
